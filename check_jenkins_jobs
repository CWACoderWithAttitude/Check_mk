#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case bundling_override);
no warnings 'uninitialized';
#print '<<<check_jenkins_jobs>>>';
my ($port, $host) ;
# Parse command line arguments
GetOptions ('host=s'   => \$host, 'port=s' => \$port);
if( (!defined($host)) || (!defined($port))) {
        print "USAGE:perl $0 -host mbiradar2d -port 8080";
  	exit 1;
}
use constant {
    OK => 0,
    WARNING => 1,
    CRITICAL => 2,
    UNKNOWN => 3,
};
sub response($$) {
	my ($code, $retstr) = @_;
	my %codemap = (
		OK => 0,
		WARNING => 1,
		CRITICAL => 2,
		UNKNOWN => 3
	);
	print "$code : $retstr";
	exit $codemap{$code};
}
my @output = `perl "H:\\Mangesh\\check_jenkins_jobs.pl" -host $host -port $port`;
my $line;
my $message;
foreach $line (@output) {
	#print $line;
	my @values = split('~', $line);
	#print @values;
	if($values[0] =~ /^CRITICAL/) {
		$message .= "Job - $values[1] : Description - $values[2] : Health score - $values[3]";
		#print $message;
		response ( "CRITICAL", $message);
	}
	elsif($values[0] =~ /^WARNING/) {
		$message .= "Job - $values[1] : Description - $values[2] : Health score - $values[3]";
		response ( "WARNING", $message);
		#print $message;
	}
	else {
		$message .= "Job - $values[1] : Description - $values[2] : Health score - $values[3]";
		response ( "OK", $message);
		#print $message;
	}
}

